#!/usr/bin/env perl
use strict;
use warnings;
use Getopt::Long;
use Cwd 'getcwd';
use FindBin;
use lib "$FindBin::Bin/../perl5lib";
use TGI::Mailer;
use constant USAGE =><<EOM;

SYNOPSIS:

gicl -in query.fa [-d <refDb>] [-g condor|sge|smp] [-c {<num_CPUs>]
     [-m <email>] [-l <min_overlap>] [-v <max_overhang>] [-R <refprefix>]
     [-p <pid>] [-n slicesize] [-mk] [-L <local_wrk_dir>] [-S] [-K] [-X] 
     [-I] [-W <pairwise_script.psx>] [-D] [-J] [-a] [--help||-h]

Version 20160216 by Fu-Hao Lu;

Requirements:
	NCBI BLAST: formatdb
	CDBtools: cdbfasta, cdbyank
	PerlModules: Getopt::Std, File::Basename, POSIX "sys_wait_h", Cwd qw(abs_path cwd),
		Fcntl qw(:DEFAULT :seek), FindBin

Descriptions:
     Cluster, overlap, and extend EST contigs using blast-based overlap

Options:
     --cpus|-c <INT>
          use the specified number of CPUs on local machine (or on a grid
           if -g option was given); default 1
   Clustering phase options:
     --query|-in <my.fasta>
          Fasta file to be merged by all-vs-all search
     --database|-db <db.fasta>
          do not perform all-vs-all search, but search <fasta_db> against 
          <refDb> instead; unless -R options was given, exit after the
          pairwise hits are generated and sorted
     --numseqs|-n <INT>
          number of sequences in a clustering search slice (default 1000)
     --pid|-p <INT>
          minimum percent identity for overlaps <PID> (default 94)
     --minovl|-l <INT>
          miminum overlap length (default 40)
     --maxovh|-v <INT>
          maximum length of unmatched overhangs (default 30)
     --refprefix|-R|-r <STR>
          instead of full assembly, perform "containment clustering" 
          with nrcl followed by assembly-on-Reference using mblaor;
          <refprefix> is the "full length" sequence name prefix 
          as used in the input files;
     --localdirbase|-L <path>
          special grid worker mode - assumed local copies exist for
          the given files in the provided <local_wrk_dir>, which will be
          used to prefix <fasta_db> and <refDb> unless they are given
          with absolute paths
     --nodbindices|-I
          do not rebuild database indices
     --nopairwaisezmerge|-K
          skip the pairwise searches, directly run the assembly program
          on previously obtained overlaps
     --nodbmasking|-mk
          ignore lower-case masking in <fasta_db> sequences
     --nosort|-S
          merge the pairwise search results without sorting them 
          (enforces -X so no assembly will be performed)
     --psx_clust|-W
          use custom script <pairwise_script.psx> for the distributed 
          pairwise searches instead of the default: gicl_mgbl.psx
     --onlysearch|-X
          do not perform assembly, only run the pairwise searches
          and sort/merge the results
     --no_zmerge|-Z 
          only run the distributed pairwise searches and exit
          (without even merging the resulting pairwise overlaps)
     --skippairewise|-J
          Skip pairwise step
     --nosingletons|-a
          Do not build singleton list
     --mailuser|-ml <email>
          Email address to receive the output message
     --debug|-D
          Debug mode
     --help|-h
          Print help message USAGE.

     1.Start;2.Index;3.Sort;4.Pairwise;5.Zmerge;6,Assemble;7.Singleton
     -L=1,3,4,5,6,7
     -I=1,3,4,5,6,7
     -K=1,3,6,7
     -S=1,2,3,4,5
     -X=1,2,3,4,5
     -Z=1,2,3,4
     -J=1,2,3,5,6,7
     -a=1,2,3,4,5,6
     
Examples

     gicl xxx.fa -l 50 -p 95 -v 40 -mk -n 2000
     ace2fasta.pl -o contigs.fa *.ace
     
     sed 's/^>/>et|/' < your.db.fa > your.db_et.fa
     cat my.fa your.db_et.fa > xxx.fa
     gicl xxx.fa -l 50 -p 95 -v 40 -mk -n 2000 -d your.db_et.fa -R et
     grep -v '^et|' *.singletons | cdbyank path/to/*.cidx > singletons.fa
     gicl singletons.fa -l 50 -p 95 -v 40 -mk -n 2000
     cat *.ace > zzz.ace
     ace2fasta.pl -o zzz.fa zzz.ace

Authors:
     Fu-Hao Lu
     Post-Dcotoral Scientist in Mike Bevan Lab,
     Cell and Developmental Biology,
     John Innes Centre,
     Norwich NR4 7UH, United Kingdom.
     Email: Fu-Hao.Lu\@jic.ac.uk

EOM



###Getoptions################################################
my ($help, $debug, $query, $skippairewise, $nodbmasking, $nomasking, $nodbindices, $nosort, $nopairwaisezmerge, $no_zmerge, $onlysearch, $psx_clust, $refprefix, $localdirbase, $useDb, $useDbname, $cpus, $mailuser, $numseqs, $pid, $minovl, $maxovh, $gridx, $asm_paramfile, $singleton_list);
GetOptions(
	"query|in=s" => \$query,
	"debug|D!" => \$debug,
	"help|h!" => \$help,
	"skippairewise|J!" => \$skippairewise,
	"nodbmasking|mk!" => \$nodbmasking,
	"nodbindices|I!" => \$nodbindices,
	"nosort|S!" => \$nosort,
	"nopairwaisezmerge|K!" => \$nopairwaisezmerge,
	"no_zmerge|Z!" => \$no_zmerge,
	"onlysearch|X!" => \$onlysearch,
	"psx_clust|W!" => \$psx_clust,
	"refprefix|R|r:s" => \$refprefix,
	"localdirbase|L:s" => \$localdirbase,
	"database|db:s" => \$useDb,
	"cpus|c:i" => \$cpus,
	"mailuser|ml:s" => \$mailuser,
	"numseqs|n:i" => \$numseqs,
	"pid|p:i" => \$pid,
	"minovl|l:i" => \$minovl,
	"maxovh|v:i" => \$maxovh,
	"gridx|g" => \$gridx,
#	"asm_paramfile|asmpf!" => \$asm_paramfile,
	"nosingletons|a!" => \$singleton_list,
);

$help=0 unless (defined $help);
$help and die USAGE;
unless (defined $query and -s $query) {
	print "\e[1;31mError: can not find the input file\e[0m\n";
	die USAGE;
}



###Default parameter######################################
&addPath($FindBin::Bin);
#&addPath($FindBin::Bin.'/bin') if (-d $FindBin::Bin.'/bin');

$debug=0 unless (defined $debug);
$numseqs=1000 unless (defined $numseqs);
$skippairewise=0 unless (defined $skippairewise);
$nomasking = (defined $nodbmasking) ? 'M' : '';
$nodbindices=0 unless (defined $nodbindices);
$nosort=(defined $nosort) ? '-M' : '';
$nopairwaisezmerge =0 unless (defined $nopairwaisezmerge);
$no_zmerge=0 unless (defined $no_zmerge);
$onlysearch=0 unless (defined $onlysearch);
$psx_clust='gicl_mgbl.psx' unless (defined $psx_clust and -e $psx_clust);
if ($localdirbase) {
	$localdirbase=~s/\/+$//;
}
if ($useDb) {
	$useDbname=&getFName($useDb);
	$useDb=&getFullPath($useDb);
	unless ($localdirbase) {
		die "\e[31;1mError: cannot locate the specified db: $useDb\e[0m\n" unless (-s $useDb);
	}
}
$cpus=1 unless (defined $cpus);
$pid=94 unless (defined $pid);
$pid=94 if $pid<20;
$minovl=40 unless (defined $minovl);
$minovl=40 if $minovl==0;
$maxovh=30 unless (defined $maxovh);
if (defined $gridx) {
	$gridx=lc($gridx);
	print "\nUnknown gridx input\n\n" unless ($gridx eq ('smp' || 'sge' || 'condor'));
}
#$asm_paramfile=0 unless (defined $asm_paramfile);
#print $asm_paramfile."\n";       ###test#####
$singleton_list=0 unless (defined $singleton_list);

our @start_params=@ARGV;
our $usemail= (defined $mailuser) ? 1 : 0;
our $no_error=1;
our $exit_msg='';
our $cur_step;
our $wrkdir=$ENV{'PWD'};
umask 0002;



###checking################################################
my $dbfname=&getFName($query);
my $dbfullpath=&getFullPath($query);

#if ($asm_paramfile) {
#	$asm_paramfile=&getFullPath($asm_paramfile);
#	die "Error: cannot find quality file $asm_paramfile\n" unless (-s $asm_paramfile);
#}
my $psxcmd = $gridx ? "gridx -g $gridx -p $cpus": "psx -p $cpus";
$psxcmd.=" -L $localdirbase" if $localdirbase && $gridx;
my $startdate=&getDate();
die "Error: $psx_clust not available in PATH!\n" unless ($psx_clust=&checkCmd($psx_clust));



###logging system initialization########################
print "Program initializing...\n";
my $log_file="gicl_$dbfname.log";
my $err_log="err_gicl_$dbfname.log";
unlink($log_file, $err_log);
open(OLDSTDERR, ">&STDERR");
open(STDOUT, ">$log_file") || &MErrExit("Failed to redirect STDOUT to $log_file");
open(STDERR, ">$err_log") || &MErrExit("Failed to redirect STDERR to $err_log");
&set_step('Initialization');
&flog("$FindBin::Script running options: \n".$FindBin::Script.' '.join(" ", @start_params));
&flog("Standard log file: $log_file");
&flog("Error log file:    $err_log");
&flog("Using $cpus CPUs for clustering and assembly");
#&flog(" Path is : $ENV{'PATH'} ");
$no_error=0;
my $clusterfile=$dbfname.($useDb ? '_'.$useDbname :'_cl').'.ace';
my ($cmd, $psxparam);
$nodbindices=1 if $nopairwaisezmerge || $localdirbase;
my $dbfileidx=$dbfullpath.'.cidx';


###rebuild indices (unless specifically told not to do so)###################
unless ($nodbindices) {
	print "Program indexing...\n";
	my $toindex = $useDb ? $useDb : $query;
	&flog("-= Rebuilding $toindex indices =-");
	$cmd="formatdb -p F -o F -i $toindex";
	system($cmd) && &MErrExit("Error at '$cmd'");
#also make sure the cdb index for the main file is created 
	system("cdbfasta $query") && &MErrExit("Error at cdbfasta $query");
}



#========= compress & merge sort the cluster results
my $hitsort = $dbfname.'_'.($useDb ? $useDbname.'_tabhits' : 'cl_tabhits');
my $rbasename = $dbfname.'_'.($useDb ? $useDbname : 'self');
my $acefile = $rbasename;
if ($skippairewise) {
	goto ZMERGE;
}



###PairWise###############################################################
PAIRWISE: {
#=- start clustering the $blastDB file
	&set_step('pairwise');
	print "Program pairwising...\n";
	unlink($clusterfile);
	if ($nopairwaisezmerge) {
		&flog("-- Skipping pairwise searches.\n");
		goto ASSEMBLE;
	}
	system('/bin/rm -rf cluster_[1-9]*') unless ($skippairewise);
# ---psx user parameter format:   <db>:<minpid>:<maxovh>:<minovl>:<flags>
#where <flags> are one or more letters of: 
#D=no self-clustering, M = no masking, G = gap info
	my $dbflag = $useDb ? 'D' : '';
	my $paramdb = $useDb ? $useDb : $dbfullpath;
	my $gapinfo = 'G'; #always save gap info
	$psxparam=join(':', ($paramdb,$pid,$maxovh,$minovl,$nomasking.$gapinfo.$dbflag));
	$cmd=$psxcmd." -n $numseqs -i $query -d cluster -C '$psxparam' -c '$psx_clust'";
	$cmd.=' -D' if $debug && $gridx;
	&flog("  Launching distributed clustering: \n $cmd");
	system($cmd) && &MErrExit("Error at '$cmd'\n");
	&end_step();


	if ($no_zmerge) {
		&flog("Exit requested after pairwise searches.");
#		&flog($exit_msg);
#		generate the clustering singleton list here?
		goto THEEND;
	}
}


###ZMERGE##############################################################
ZMERGE: {
	&set_step('mgmerge');
	print "Program merging...\n";
	my @dirs = ((<cluster_?>),(<cluster_??>));
	unlink('masked.lst');

	foreach my $dir (@dirs) {
		next unless -d $dir;
		system("cat $dir/masked.lst >> masked.lst");
		&zmergeDirHits($dir);
	}
	$cmd="mgmerge -b $nosort -o $hitsort -s 1600 zdir_*.bz2";
	system($cmd) && &MErrExit("Error at final sort:\n $cmd");
	system('/bin/rm -rf zdir_*.bz2') unless $debug;
	goto THEEND if $nosort;
	if ($onlysearch || ($useDb && !$refprefix)) {
		&flog("Exit requested after pairwise searches and sorting") if $onlysearch;
#		&flog($exit_msg);
#		generate the clustering singleton list here?
		goto THEEND;
	}
}



###Assemble###########################################################
ASSEMBLE: {
	&set_step('assemble');
	print "Program assembling...\n";
	if ($refprefix) {
		$acefile.='.aor.ace';
		my $lytfile= $rbasename.'.nrcl.lyt'; 
		$cmd="bzip2 -cd ${hitsort}_*.bz2 | nrcl OVHANG=$maxovh -o $rbasename.nrcls -y $lytfile";
		$refprefix=~s/\|$//;
		$cmd.=" -p '$refprefix'";
		system($cmd) && &MErrExit("Error at command: $cmd");
#now assemble using aor
		$cmd = "mblaor $lytfile -d $dbfileidx -c $maxovh -p '$refprefix' -o $acefile";
		system($cmd) && &MErrExit("Error at assembly command: $cmd");
	}
	else {# straight-forward, all vs all assembly
		$acefile.='.ace';
		$cmd="bzip2 -cd ${hitsort}_*.bz2 | mblasm -d $dbfileidx -c $maxovh -o $acefile";
		&flog("Running assembly command: $cmd\n");
		system($cmd) && &MErrExit("Error at assembly command: $cmd");
	}
	&end_step();
}



###Singleton#########################################################
SINGLETSONLY: {
	&set_step('singletons');
	print "Program building singletons...\n";
	unless ($singleton_list) {
	#build the singleton list if the full straight clustering/assembly pipeline was run
		$cmd='grep "^AF " '.$acefile.'| cut -d " " -f2 | sort -u > seqnames_in_asms';
		system($cmd) && &MErrExit("Error running:\n$cmd\n");
		$cmd="cdbyank -l $dbfileidx | sort > seqnames_all";
		system($cmd) && &MErrExit("Error running:\n$cmd\n");
		my $sglist = $rbasename.'.singletons';
		$cmd="comm -23 seqnames_all seqnames_in_asms > $sglist";
		system($cmd) && &MErrExit("Error running:\n$cmd");
		unlink('seqnames_all', 'seqnames_in_asms');
		print STDERR "Singletons are listed in file: $sglist\n";
	}
	&end_step();
}


###The END#########################################################
THEEND: {
	$no_error=1;
	&flog("*** gicl [$rbasename] finished ***");
}



END { #to be executed on exit
	if ($cur_step && $err_log) {
		my $step_log=`cat $err_log`;
		$step_log =~ s/\s+$//;
		$exit_msg.="\nThis is the content of the error log file (ended at $cur_step):\n$step_log" if ($step_log);
		my $host=$ENV{'HOST'} || $ENV{'HOSTNAME'};
		my $msg = $no_error ? qq/$FindBin::Script ($query) finished on machine $host
                 in $wrkdir, without a detectable error.
                 / :
                 qq/$FindBin::Script ($query) encountered an error at step $cur_step
                 Working directory was $wrkdir.                 
                 /;
		unless ($no_error) { #an abnormal termination
			&flog("\nProcess terminated with an error, at step '$cur_step'!");
			&send_mail({to=>$mailuser, subj=>"$FindBin::Script ($query) error at $cur_step!",
			body=>$msg.$exit_msg}) if ($usemail);   
			&flog($msg);
		}
		else {
			#&flog("*** Done ***") if ($cur_step && lc($cur_step) ne 'Initialization');
			&send_mail({to=>$mailuser, subj=>"$FindBin::Script ($query) finished.",
			body=>$msg.$exit_msg}) if ($usemail);
		}
		print OLDSTDERR $msg;
	}
}



#####################################################################
###################  sub functions  #################################
#####################################################################
#checks f##or executable, in the PATH if no full path given
sub checkCmd {
	my $cmd=$_[0];
	if ($cmd =~ m/^\//) {
		return (-x $cmd) ? $cmd : '';
	}
	my @paths=split(/:/, $ENV{'PATH'});
	foreach my $p (@paths) {
		return $p.'/'.$cmd if -x $p.'/'.$cmd;
	}
	return ''; 
}



#Output message to file
sub flog {
	print STDOUT join("\n",@_),"\n";
	print STDERR join("\n",@_),"\n";
}



sub MErrExit {#print STDERR $_[0]."\n";
	$exit_msg.=$_[0].$_[1];
	&flog($exit_msg);
	exit(1) unless defined($_[1]);
	die $_[1];
}



sub set_step {
	$cur_step=$_[0];
	&flog(">>> --- $cur_step [$query] started at ".&getDate());
}



sub end_step {
	&flog("<<< --- $cur_step [$query] finished at ".&getDate());
}



#a basic date function :
sub getDate {
	my $date=localtime();
#get rid of the day so Sybase will accept it
	(my $wday,$date)=split(/\s+/,$date,2);
	return $date;
}



sub getFullPath {
	if ($localdirbase) {
		return ($_[0] =~ m/^\//) ? $_[0] : $localdirbase.'/'.$_[0];
	}
	else {
		return ($_[0] =~ m/^\//) ? $_[0] : $ENV{'PWD'}.'/'.$_[0];
	}
}



sub getFName {
	if ($_[0] =~ m/.+[\/\\](.*?)$/) {
		return $1;
	}
	else {
		return $_[0];
	}
}

# sub addPath {
#  my $path=$ENV{'PATH'};
#  foreach my $p (@_) {
#   next if ($p eq $path || m/\Q:$p$/ 
#           || m/:\Q$p:/ || m/^\Q$p:/);
#   $path=$p.':'.$path;
#   }
#  $ENV{'PATH'}=$path; 
# }

sub addPath {
	my $path=$ENV{'PATH'};
	my @allp=split(/\:/,$path);
	my %h;
	@h{@allp}=(); 
	foreach my $p (@_) {
		next if (exists $h{$p});
		$path=$p.':'.$path;
	}
	$ENV{'PATH'}=$path;
}



sub zmergeDirHits {
	my ($dir)=@_;
	my $maxfopen=16; #max files to open once -- must never fail due to hitting the system limit
	my $run=0;
	my $startDir=getcwd(); # from Cwd module
	chdir($dir) || die "Cannot change to $dir directory!\n";
	my $numFiles=0;
	while (1) {
		opendir(FDIR, '.') || die "Cannot open directory $dir\n";
		my @allfiles=readdir(FDIR); #possibly large array w/ all the files from that directory
		close(FDIR);
		@allfiles=grep(/\.bz2$/, @allfiles);
		$numFiles=@allfiles;
		last if ($numFiles<=$maxfopen);
		my @files;
		foreach my $f (@allfiles) {
			next unless ($f=~m/\.tab\.bz2$/ || $f=~m/zMrg_p\S+\.bz2$/);
			push(@files, $f);
			if (@files==$maxfopen) {
				my $sortcmd="mgmerge -b $nosort -o zMrg_p$run -s 1200 ".join(' ',@files);
				$run++;
				&runCmd($sortcmd);
				if ($debug) {
					foreach my $rf (@files) {
						my $ren=$rf;
						$ren=~s/\.bz2$/\.bz/;
						rename($rf, $ren);
					}
				}
				else {
					unlink(@files);
				}
			@files=();
			}
		}
		if (@files>1) {
			my $sortcmd="mgmerge -b $nosort -o zMrg_p$run -s 1200 ".join(' ',@files);
			$run++;
			&runCmd($sortcmd);
			if ($debug) {
				foreach my $rf (@files) {
					my $ren=$rf;
					$ren=~s/bz2$/bz/;
					rename($rf, $ren);
				}
			}
			else { 
				unlink(@files); 
			}
		}
	}
	chdir($startDir);
	if ($numFiles) { #some directories may be empty!
		my $sortcmd="mgmerge -b $nosort -o zdir_$dir -s 1700 $dir/*.bz2";
		&runCmd($sortcmd);
	}
	system("/bin/rm -rf $dir") unless $debug;
}

sub runCmd {
	my $cmd=shift(@_);
	print STDERR "Running:\n$cmd\n" if $debug;
	my $errout=`( $cmd ) 2>&1`;
	my $errcode=$?;
	print STDERR $errout;
	if ($errcode) {
		print STDERR "Error status detected (code=$errcode) at command $cmd\n";
		exit(1); 
#exit, but do not report error 
#- so we can continue to assemble the rest of the clusters!
	}
	if ($errout=~/aborted|error|fail|segmentation|violation|cannot|no such file/i) {
		print STDERR "Error message detected after running command:\n$cmd\n";
		exit(2);
	}
}
